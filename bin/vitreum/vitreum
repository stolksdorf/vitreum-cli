#!/usr/bin/env node

const path = require('path');
const fs   = require('fs');
const mkdirp = require('mkdirp');

const location = process.cwd();

const templates = Object.assign(
	require('./vitreum.templates.js'),
	require('../jsx/jsx.templates.js')
);


const LIBS = [
	'lodash',
	'react',
	//'react-dom',
	'classnames',
	'express',
	'app-module-path',
	'vitreum'
];

const makeFile = (name, contents) => { fs.writeFileSync(path.join(location, name), contents); };
const makeFolder = (name) => { mkdirp.sync(path.join(location, name)); };
const success = (msg) => { console.log(`${msg} âœ“`);}
const mp = (fn) => {
	return ()=>{
		return new Promise((resolve) => {
			fn(); return resolve();
		});
	}
};

var package = {};

const loadPackage = () => {
	return new Promise((resolve, reject) => {
		try{
			const packageRaw = fs.readFileSync(path.join(location, 'package.json'), 'utf8');
			package = JSON.parse(packageRaw);
			success('loaded package.json');
			return resolve();
		}catch(e){
			throw 'No package.json found. try running `npm init` first';
		}
	});
};

const addDeps = mp(()=>{
	package.dependencies = package.dependencies || {};
	LIBS.forEach((lib) => {
		package.dependencies[lib] = '*';
	});
	success('added dependacies')
});




const updatePackage = mp(() => {
	package.main = 'server/server.js';

	package.scripts = {
		"build": "",
		"watch": "",
		"libs": "",

		"postinstall": "npm run build",
		"start": "node server/server.js"
	}


	///////
	makeFile('package.json', JSON.stringify(package, null, '  '));
	success('updated package.json');
});

/*
const createGulpFile = ()=>{
	return new Promise((resolve) => {
		fs.writeFileSync(path.join(location, 'gulpfile.js'), templates.gulp());
		console.log('Created gulpfile.js');
		return resolve();
	});
}
*/

const makeTasks = {};

const makeClient = mp(()=>{
	makeFolder('client');
	makeFile('client/template.dot', templates.template());
	success('client folder');

	makeFolder('client/main');
	makeFile('client/main/main.jsx', templates.jsx('main'));
	makeFile('client/main/main.less', templates.less('main'));
	success('main component');
});

const makeServer = mp(() => {
	makeFolder('server');
	makeFile('server/server.js', templates.server());
	success('server');
});

const makeGitIgnore = mp(() => {
	makeFile('.gitignore', templates.gitignore());
	success('created gitignore');
});

const done = () => {
	console.log('done!');
	console.log('\nRun the following command:\n');
	console.log(`    npm i -S ${LIBS.join(' ')}\n\n`);
};


loadPackage()
	//.then(addDeps)
	.then(updatePackage)
	.then(done)
	.catch(console.error)


/*
npmInstall()
	.then(createGulpFile)
	.then(makeClient)
	.then(makeServer)
	.then(makeGitIgnore)
	.then(cleanupPackage)
	.then(wrapUp)
	.catch((err) => {
		(err);
	})
*/
