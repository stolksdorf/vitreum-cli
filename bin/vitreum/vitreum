#!/usr/bin/env node

const path = require('path');
const fse   = require('fs-extra');
const chalk = require('chalk');


const location = process.cwd();

const templates = Object.assign(
	require('./vitreum.templates.js'),
	require('../jsx/jsx.templates.js')
);


const LIBS = [
	'lodash',
	//'classnames',
	'express',
	'vitreum',
	'nconf'
];

const success = (msg) => {
	console.log(chalk.green('âœ“ ') + msg);
};

const mp = (fn) => {
	return ()=>{
		return new Promise((resolve) => {
			fn(); return resolve();
		});
	}
};



var package = {};

const loadPackage = () => {
	return new Promise((resolve, reject) => {
		fse.readJson('./package.json', (err, packageObj) => {
			if(err) return reject('No package.json found. try running `npm init` first');
			package = packageObj;
			return resolve(packageObj);
		});
	});
};

const updatePackage = mp(() => {
	package.main = 'server.js';
	package.scripts = {
		"dev"  : "node scripts/dev.js",
		"build": "node scripts/build.js",
		"prod" : "set NODE_ENV=production&& npm run build",

		"postinstall": "npm run build",
		"start" : "node server.js"
	};
	fse.writeJsonSync('./package.json', package);
	success('updated package.json');
});

const makeClient = mp(()=>{
	fse.outputFileSync('./client/template.js', templates.template());

	fse.outputFileSync('./client/main/main.jsx', templates.jsx('main'));
	fse.outputFileSync('./client/main/main.less', templates.less('main'));
	success('created main component');
});

const makeServer = mp(() => {
	fse.outputFileSync('./server.js', templates.server());
	fse.outputFileSync('./server/routes.js', '');
	success('created server files');
});

const makeDotFiles = mp(() => {
	fse.outputFileSync('.gitignore', [
		'*.log',
		'build',
		'node_modules',
		'config/local.json'
	].join('\n'));
	success('created .gitignore');

	fse.outputJsonSync('.babelrc', {
		"presets": ["env", "react"]
	});
	success('created .babelrc');
});

const makeConfig = mp(()=>{
	fse.outputJsonSync('./config/default.json', {});
	fse.outputJsonSync('./config/local.json', {});
	success('created configs');
});

const makeScripts = mp(()=>{
	fse.outputJsonSync('./scripts/project.json', {
		"entryPoints" : {
			"main" : "./client/main/main.jsx"
		},
		"assets" : ["*.svg", "*.png", "*.jpg", "*.otf", "*.woff", "*.ico", "*.ttf"],
		"libs" : [
			"react",
			"react-dom",
			"lodash",
			"classnames"
		]
	});
	fse.outputFileSync('./scripts/build.js', templates.buildScript());
	fse.outputFileSync('./scripts/dev.js', templates.devScript());
	success('created build scripts');
});

const makeShared = mp(()=>{
	fse.outputFileSync('./shared/build.js', templates.buildScript());
	fse.outputFileSync('./shared/dev.js', templates.devScript());
	success('created shared');
});


const done = () => {
	console.log('done!');
	console.log('\nInstall the following libs:');
	console.log(chalk.cyan(`  npm i -S ${LIBS.join(' ')}\n`));

	//TODO: add suggestions for optional libs, date-fns, your style module, etc.
};


loadPackage()
	.then(updatePackage)
	.then(makeClient)
	.then(makeScripts)
	.then(makeServer)
	.then(makeShared)
	.then(makeDotFiles)
	.then(makeConfig)
	.then(done)
	.catch(console.error)
