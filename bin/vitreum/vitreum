#!/usr/bin/env node

const path = require('path');
const fs   = require('fs');
const mkdirp = require('mkdirp');
const root  = path.join(path.dirname(fs.realpathSync(__filename)), '../');


const location = process.cwd();


const templates = Object.assign(
	require('./vitreum.templates.js'),
	require('../jsx/jsx.templates.js')
);


const LIBS = [
	'lodash',
	'react',
	'react-dom',
	'classnames',
	'express',
	'app-module-path',
	'vitreum'
];

const makeFile = (name, contents) => { fs.writeFileSync(path.join(location, name), contents); };
const makeFolder = (name) => { mkdirp.sync(path.join(location, name) };

const package;

const npmInstall = ()=>{
	return new Promise((resolve, reject) => {
		try{
			const packageRaw = fs.readFileSync(path.join(location, 'package.json'), 'utf8');
			package = JSON.parse(packageRaw);
			console.log('Found package.json');
		}catch(e){
			throw 'You must run "npm init" first';
		}

		console.log('Installing dependacies... (this might take a while)');
		exec(`npm install ${DEPS.join(' ')} --save`, (err, stdOut, stdErr) => {
			if(err) return reject(stdErr);

			return resolve();
		})
	});
};

const createGulpFile = ()=>{
	return new Promise((resolve) => {
		fs.writeFileSync(path.join(location, 'gulpfile.js'), templates.gulp());
		console.log('Created gulpfile.js');
		return resolve();
	});
}

const makeClient = ()=>{
	return new Promise((resolve) => {
		mkdirp(path.join(location, 'client'), (err) => {
			if(err) throw 'Could not create client folder';

			fs.writeFileSync(path.join(location, 'client', 'template.dot'), templates.template());
			console.log('Created root page template');

			const name = 'main';
			mkdirp(path.join(location, 'client', name), (err) => {
				if(err) throw 'Could not create name component folder';
				fs.writeFileSync(
					path.join(location, 'client', name, `${name}.jsx`),
					jsxTemplates.jsx(name));
				fs.writeFileSync(
					path.join(location, 'client', name, `${name}.less`),
					jsxTemplates.less(name));
				console.log('Created main component');
				return resolve();
			});
		});
	})
}

const makeServer = () => {
	return new Promise((resolve) => {
		fs.writeFileSync(path.join(location,'server.js'), templates.server());
		console.log('Created server.js');
		mkdirp(path.join(location, 'server'), (err) => {
			if(err) throw 'Could not create server folder';
			console.log('Created server folder');
			mkdirp(path.join(location, 'shared'), (err) => {
				if(err) throw 'Could not create shared folder';
				console.log('Created shared folder');
				return resolve();
			});
		});
	});
};

const makeGitIgnore = () => {
	return new Promise((resolve) => {
		fs.writeFileSync(path.join(location,'.gitignore'), templates.gitIgnore());
		console.log('Created gitignore');
		return resolve();
	});
}

const cleanupPackage = () => {
	return new Promise((resolve) => {
		if(!package) throw 'Could not find a package.json';

		package.main = 'server.js';
		package.scripts.postinstall = 'gulp prod';

		fs.writeFileSync(path.join(location,'package.json'), JSON.stringify(package, null, '  '));
		console.log('Updated package.json');
		return resolve();
	})
}

const wrapUp = () => {
	return new Promise((resolve) => {
		console.log('\n\nDone!');
		console.log('\n`gulp fresh && gulp` to do a fresh build');
	});
};


makeFolder('cool')


/*
npmInstall()
	.then(createGulpFile)
	.then(makeClient)
	.then(makeServer)
	.then(makeGitIgnore)
	.then(cleanupPackage)
	.then(wrapUp)
	.catch((err) => {
		console.log(`ERR: ${err.toString()}`);
	})
*/
